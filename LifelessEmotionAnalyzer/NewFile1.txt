using System.Linq;
using System.Windows.Forms.DataVisualization.Charting;
using System.Windows.Forms;
using DPF_C_sh.Models;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using System.Drawing;
using ComboBox = System.Windows.Forms.ComboBox;
using TextBox = System.Windows.Forms.TextBox;
using static System.Net.Mime.MediaTypeNames;
using System.Collections.Generic;

namespace DPF_C_sh.Methods
{
    internal class AccessoryMethods
    {
        public AccessoryMethods() { }

        public void PrintFileDataGraphByKey(ref MainDataModel dataContext, NumericUpDown numUpTimeStart, Panel panel, 
            TextBox chosenFileName, int fileKey)
        {
            var chosenFile = dataContext.wavFiles
                .Where(el => el.Key == fileKey).FirstOrDefault();

            if (dataContext.fileDataChart == null)
            {
                // Создание элемента Chart
                dataContext.fileDataChart = new Chart();

                // Растягивание элемента Chart на панели
                dataContext.fileDataChart.Parent = panel;
                dataContext.fileDataChart.Dock = DockStyle.Fill;
            }
            else
            {
                dataContext.fileDataChart.Series.Clear();
                dataContext.fileDataChart.ChartAreas.Clear();
            }

            // Добавление области для отрисовки графика
            dataContext.fileDataChart.ChartAreas.Add(new ChartArea(chosenFile.Value.fileName));

            // Создаем и настраиваем набор точек для рисования графика
            Series pointSeries = new Series("Sound");
            pointSeries.ChartType = SeriesChartType.Line;
            pointSeries.ChartArea = chosenFile.Value.fileName;

            var x = (double)numUpTimeStart.Value;
            var delta = 1.00 / chosenFile.Value.sampleRate;

            foreach (var data in chosenFile.Value.soundData)
            {
                pointSeries.Points.AddXY(x, data);
                x += delta;
            }

            //Добавляем созданный набор точек в Chart
            dataContext.fileDataChart.Series.Add(pointSeries);

            chosenFileName.Text = chosenFile.Value.fileName;
        }

        public void PrintResultDataGraphByKey(ref MainDataModel dataContext, Panel panel, NumericUpDown NumUpSmooth, TextBox ChosenFileName)
        {
            var chosenFile = dataContext.wavFiles
                .Where(el => el.Value.fileName == ChosenFileName.Text).FirstOrDefault();

            var chosenResultDpf = dataContext.resultDpf
                .Where(el => el.Key == chosenFile.Key).FirstOrDefault();

            if (dataContext.dpfDataChart is null)
            {
                // Создание элемента Chart
                dataContext.dpfDataChart = new Chart();

                // Растягивание элемента Chart на панели
                dataContext.dpfDataChart.Parent = panel;
                dataContext.dpfDataChart.Dock = DockStyle.Fill;
            }
            else
            {
                dataContext.dpfDataChart.Series.Clear();
                dataContext.dpfDataChart.ChartAreas.Clear();
            }

            // Добавление области для отрисовки графика
            dataContext.dpfDataChart.ChartAreas.Add(new ChartArea(chosenFile.Value.fileName));

            // Создаем и настраиваем набор точек для рисования графика
            Series pointSeries = new Series("Sound");
            pointSeries.ChartType = SeriesChartType.Line;
            pointSeries.ChartArea = chosenFile.Value.fileName;

            // Сглаживание
            for (int k = 0; k < NumUpSmooth.Value; k++)
                for (int j = 0, m = 4; j < m; j++)
                    for (int i = 2, l = chosenResultDpf.Value.resultDpfData.Count - 1; i < l; i++)
                        chosenResultDpf.Value.resultDpfData[i].Amplitude = 0.5 * (0.5 * (chosenResultDpf.Value.resultDpfData[i - 1].Amplitude 
                            + chosenResultDpf.Value.resultDpfData[i + 1].Amplitude) + chosenResultDpf.Value.resultDpfData[i].Amplitude);

            // Заполнение набора точек
            foreach(var data in chosenResultDpf.Value.resultDpfData)
                if (data.Frecuency > 0)
                    pointSeries.Points.AddXY(data.Frecuency, data.Amplitude);

            // Добавление созданного набора точек к графику
            dataContext.dpfDataChart.Series.Add(pointSeries);
        }

        public void PrintRequencyRatiosByKey(MainDataModel dataContext, TextBox textBox, TextBox ChosenFileName)
        {
            var chosenFile = dataContext.wavFiles
                .Where(el => el.Value.fileName == ChosenFileName.Text).FirstOrDefault();

            var chosenResultRR = dataContext.requencyRatios
                .Where(el => el.Key == chosenFile.Key).FirstOrDefault();

            textBox.Text = "Полученные отношения частот:\r\n";

            foreach(var e in chosenResultRR.Value)
                textBox.Text += e.ToString() + "\r\n";
        }

        public void ChoseNextFile(ref MainDataModel dataContext, NumericUpDown numUpTimeStart, NumericUpDown numUpSmooth,
            Panel filePanel, Panel dpfPanel,
            TextBox chosenFileName, TextBox chosenRequency, int fileKey, bool left)
        {
            string newName = string.Empty;

            var chosenFile = dataContext.wavFiles
                    .Where(el => el.Value.fileName == chosenFileName.Text).FirstOrDefault();

            var newChosenFile = left
                ? dataContext.wavFiles.Where(el => el.Key == chosenFile.Key - 1).FirstOrDefault()
                : dataContext.wavFiles.Where(el => el.Key == chosenFile.Key + 1).FirstOrDefault();

            if(newChosenFile.Value != null)
            {
                if (dataContext.wavFiles.Any())
                    PrintFileDataGraphByKey(ref dataContext, numUpTimeStart, filePanel,
                        chosenFileName, newChosenFile.Key);

                if(dataContext.resultDpf.Any())
                    PrintResultDataGraphByKey(ref dataContext, dpfPanel, numUpSmooth, chosenFileName);

                if(dataContext.requencyRatios.Any())
                    PrintRequencyRatiosByKey(dataContext, chosenRequency, chosenFileName);
            }
        }

        public void CreateExcelRequencyRatios(MainDataModel dataContext)
        {
            var musIntervals = new Dictionary<double, Color>()
            {
                { 0.89, Color.FromArgb(102, 255, 153) }, // Большая секунда
                { 0.84, Color.FromArgb(153, 204, 255) }, // Малая терция
                { 0.79, Color.FromArgb(102, 255, 153) }, // Большая терция
                { 0.75, Color.FromArgb(255, 153, 255) }, // Кварта (чистая)
                { 0.67, Color.FromArgb(255, 153, 255) }, // Квинта (чистая)
                { 0.63, Color.FromArgb(191, 191, 191) }, // Малая секста
                { 0.6, Color.FromArgb(255, 153, 153) }, // Большая секста
                { 0.56, Color.FromArgb(255, 255, 153) }, // Маля септима
                { 0.53, Color.FromArgb(191, 191, 191) }, // Большая септима
                { 0.5, Color.FromArgb(191, 191, 191) } // Октава
            };
            var emotionStr = new List<string>() { "Радость", "Страх", "Отвращение" };
            var emotionMusInt = new List<List<double>>() {
                new List<double> {0.79, 0.89, 0.56},
                new List<double> {0.84, 0.75, 0.67 },
                new List<double> {0.6, 0.67, 0.75, 0.56 }
            };

            // Создаём объект - экземпляр нашего приложения
            Microsoft.Office.Interop.Excel.Application excelApp = new Microsoft.Office.Interop.Excel.Application();

            // Создаём экземпляр рабочей книги Excel
            Microsoft.Office.Interop.Excel.Workbook workBook;

            // Создаём экземпляр листа Excel
            Microsoft.Office.Interop.Excel.Worksheet workSheet, workSheet2;
            workBook = excelApp.Workbooks.Add();
            workBook.Worksheets.Add();
            workSheet = (Microsoft.Office.Interop.Excel.Worksheet)workBook.Worksheets.get_Item(1);
            workSheet2 = (Microsoft.Office.Interop.Excel.Worksheet)workBook.Worksheets.get_Item(2);

            var rowCount = dataContext.requencyRatios.Count();
            var columnCount = dataContext.requencyRatios.First().Value.Count();

            // Заполнение шапки
            for (int i = 0, j = 0, k = 0, upIndent = 1, leftIdent = 2; j < columnCount + 4; j++)
            {
                if (j < columnCount)
                    workSheet.Cells[i + upIndent, j + leftIdent] = $"X{j + 1}";
                if (j == columnCount)
                    workSheet.Cells[i + upIndent, j + leftIdent] = $"Y1";
                if (j > columnCount)
                {
                    workSheet.Cells[i + upIndent, j + leftIdent] = emotionStr[k];
                    k++;
                }
            }

            // Заполнение названий
            for (int i = 0, j = 0, upIndent = 2, leftIdent = 1; i < rowCount; i++)
                workSheet.Cells[i + upIndent, j + leftIdent] = dataContext.wavFiles
                    .Where(e => e.Key == dataContext.requencyRatios.ToArray()[i].Key).FirstOrDefault().Value.fileName;

            // Заполнение значений
            for (int i = 0, upIndent = 2, leftIdent = 2; i < rowCount; i++)
                for (int j = 0; j < columnCount; j++)
                {
                    dataContext.requencyRatios.ToArray()[i].Value.Sort();
                    foreach (var interval in musIntervals)
                        if (interval.Key == dataContext.requencyRatios.ToArray()[i].Value[j])
                            workSheet.Cells[i + upIndent, j + leftIdent].Interior.Color = interval.Value;
                    workSheet.Cells[i + upIndent, j + leftIdent] = dataContext.requencyRatios.ToArray()[i].Value[j];
                }

            // Заполнение предполагаемых результатов
            for (int i = 0, j = 0, upIndent = 2, leftIdent = 2 + columnCount; i < rowCount; i++)
                workSheet.Cells[i + upIndent, j + leftIdent] = dataContext.wavFiles
                    .Where(e => e.Key == dataContext.requencyRatios.ToArray()[i].Key).FirstOrDefault().Value.emotionNum;

            //Заполнение итогов по данному набору параметров
            var correctCount = 0;
            for (int i = 0, upIndent = 2, leftIdent = 3 + columnCount; i < rowCount; i++)
            {
                var maxCount = 0;
                var maxCountIndex = 0;
                for (int j = 0; j < emotionMusInt.Count(); j++)
                {
                    var count = 0;
                    for (int k = 0; k < emotionMusInt[j].Count(); k++)
                        if (dataContext.requencyRatios.ToArray()[i].Value.Contains(emotionMusInt[j][k]))
                            count++;
                    if (count > maxCount)
                    {
                        maxCount = count;
                        maxCountIndex = j + 1;
                    }
                    workSheet.Cells[i + upIndent, j + leftIdent] = count;
                }
                workSheet.Cells[i + upIndent, emotionMusInt.Count() + leftIdent] = maxCountIndex;
                if (maxCountIndex == dataContext.wavFiles
                    .Where(e => e.Key == dataContext.requencyRatios.ToArray()[i].Key).FirstOrDefault().Value.emotionNum)
                {
                    workSheet.Cells[i + upIndent, emotionMusInt.Count() + leftIdent].Interior.Color = Color.FromArgb(169, 208, 142);
                    correctCount++;
                }
                else
                    workSheet.Cells[i + upIndent, emotionMusInt.Count() + leftIdent].Interior.Color = Color.FromArgb(244, 176, 132);
            }
            workSheet.Cells[1, 1] = correctCount;

            // Заполнение шапки
            for (int i = 0, j = 0, upIndent = 1, leftIdent = 1; j < 11; j++)
            {
                if (j < 10)
                    workSheet2.Cells[i + upIndent, j + leftIdent] = $"X{j + 1}";
                if (j == 10)
                    workSheet2.Cells[i + upIndent, j + leftIdent] = $"Y1";
            }
            for (int i = 0, upIndent = 2, leftIdent = 1; i < rowCount; i++)
            {
                for (int j = 0; j < 10; j++)
                {
                    var flag = false;
                    if (dataContext.requencyRatios.ToArray()[i].Value.Contains(musIntervals.ToArray()[j].Key))
                        flag = true;
                    if (flag)
                        workSheet2.Cells[i + upIndent, j + leftIdent] = "1";
                    else
                        workSheet2.Cells[i + upIndent, j + leftIdent] = "0";
                }
                var temp = new List<double>()
                {
                    { 0 },{ 0 },{ 0 }
                };
                temp[dataContext.wavFiles
                    .Where(e => e.Key == dataContext.requencyRatios.ToArray()[i].Key).FirstOrDefault().Value.emotionNum - 1] = 1; 

                workSheet2.Cells[i + upIndent, 11] = temp[0];
                workSheet2.Cells[i + upIndent, 12] = temp[1];
                workSheet2.Cells[i + upIndent, 13] = temp[2];
            }
            // Открываем созданный excel-файл
            excelApp.Visible = true;
            excelApp.UserControl = true;
        }

        public void NLayerGenerator(ref MainDataModel dataContext, ComboBox layerCount, TabPage tabPage)
        {
            for (int i = dataContext.layersList.Count() - 1; dataContext.layersList.Count() != int.Parse(layerCount.SelectedItem.ToString()) && i >= 0; i--)
            {
                tabPage.Controls.Remove(dataContext.layersList[i]);
                dataContext.layersList.Remove(dataContext.layersList[i]);
            }
            for (int i = dataContext.layersList.Count(); i < int.Parse(layerCount.SelectedItem.ToString()); i++)
            {
                NumericUpDown newNumericUpDown = new NumericUpDown();
                NumericUpDown lastOld = dataContext.layersList.LastOrDefault();
                if (lastOld == null)
                {
                    newNumericUpDown.Location = new Point(layerCount.Location.X, layerCount.Location.Y + 30);
                    newNumericUpDown.Size = new Size(layerCount.Size.Width, layerCount.Size.Height);
                }
                else
                {
                    newNumericUpDown.Location = new Point(lastOld.Location.X, lastOld.Location.Y + 30);
                    newNumericUpDown.Size = new Size(layerCount.Size.Width, layerCount.Size.Height);
                }
                dataContext.layersList.Add(newNumericUpDown);
                tabPage.Controls.Add(newNumericUpDown);
            }
        }

        public void NOpenLearnedFile(ref MainDataModel dataContext, OpenFileDialog openFileDialog)
        {
            if (openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                dataContext.neuronNetworkModel = new NeuronNetworkModel(openFileDialog.FileName);
            }
        }
    }
}

//using AForge.Neuro.Learning;
//using AForge.Neuro;
using Accord.Neuro.Learning;
using Accord.Neuro;
using DPF_C_sh.Models;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using ComboBox = System.Windows.Forms.ComboBox;
using AForge.Math.Metrics;
using DPF_C_sh.ActivationFunctionsCustom;
using ProgressBar = System.Windows.Forms.ProgressBar;

namespace DPF_C_sh.Methods
{
    internal class DataManagerMethods
    {
        public DataManagerMethods() { }

        #region Методы для нахождения отношений частот
        /// <summary>
        /// Считывание файла (формат .wav)
        /// </summary>
        /// <param name="fileName"></param>
        /// <param name="numUpTimeStart"></param>
        /// <param name="numUpTimeRange"></param>
        /// <param name="dataContext"></param>
        public void ReadWavFiles(OpenFileDialog fileDialog, NumericUpDown numUpTimeStart, NumericUpDown numUpTimeRange, ref MainDataModel dataContext)
        {
            dataContext.wavFiles = new Dictionary<int, WavFileModel>();
            var index = 0;

            foreach(var file in fileDialog.FileNames)
            {
                using (FileStream fileStream = new FileStream(file, FileMode.Open))
                using (BinaryReader reader = new BinaryReader(fileStream))
                {

                    #region Считывание заголовка
                    var chunkID = reader.ReadInt32();
                    var chunkSize = reader.ReadInt32();
                    var format = reader.ReadInt32();
                    var subchunk1ID = reader.ReadInt32();
                    var subchunk1Size = reader.ReadInt32();
                    var audioFormat = reader.ReadInt16();
                    var numChannels = reader.ReadInt16();
                    var sampleRate = reader.ReadInt32();
                    var byteRate = reader.ReadInt32();
                    var blockAlign = reader.ReadInt16();
                    var bitsPerSample = reader.ReadInt16();

                    if (subchunk1Size == 18)
                    {
                        var fmtExtraSize = reader.ReadInt16();
                        reader.ReadBytes(fmtExtraSize);
                    }
                    #endregion

                    #region Считываение данных
                    var dataID = reader.ReadInt32();
                    var dataSize = reader.ReadInt32();
                    var tempData = reader.ReadBytes(chunkSize);
                    #endregion

                    // Номер начального байта
                    var i = (int)((double)numUpTimeStart.Value * sampleRate * blockAlign);

                    // Номер конечного байта
                    var endByteNum = i + (int)((double)numUpTimeRange.Value * sampleRate * blockAlign);

                    var sound = 0;
                    var tempSoundData = new List<double>();

                    // Преобразование массива байтов в последовательность сигналов
                    while (i < tempData.Length && i < endByteNum)
                    {
                        if (bitsPerSample == 8)
                            sound = Convert.ToInt16(tempData[i]);
                        else if (bitsPerSample == 16)
                            sound = BitConverter.ToInt16(tempData, i);
                        else if (bitsPerSample == 32)
                            sound = BitConverter.ToInt32(tempData, i);

                        tempSoundData.Add(sound);
                        i += blockAlign;
                    }
                    reader.Close();
                    fileStream.Close();

                    dataContext.wavFiles.Add(index, 
                        new WavFileModel(file.Split('\\')[file.Split('\\').Length - 1].Split('.')[0].Split('-')[0],
                        Convert.ToInt32(file.Split('\\')[file.Split('\\').Length - 1].Split('.')[0].Split('-')[1]),
                        sampleRate, blockAlign, bitsPerSample, tempSoundData.ToArray()));

                    index++;
                }
            }
        }

        /// <summary>
        /// Дискретное преобразование Фурье
        /// </summary>
        /// <param name="dataContext"></param>
        /// <param name="maxAmplitude"></param>
        /// <returns></returns>
        public void DPF(ref MainDataModel dataContext)
        {
            dataContext.resultDpf = new Dictionary<int, ResultDpfModel>();

            foreach (var file in dataContext.wavFiles)
            {
                var result = new List<SoundElement>();
                var maxAmplitude = double.MinValue;

                int n = file.Value.soundData.Length;
                if (n > 0)
                {
                    alglib.complex[] dpfResult = new alglib.complex[n];
                    alglib.fftr1d(file.Value.soundData, n, out dpfResult);

                    // частота = частота дискретизации / размер массива
                    var frequency = (double)file.Value.sampleRate / n;

                    for (int k = 0; k < n / 2; k++)
                    {
                        var amplitudeValue = (2 * Math.Sqrt(Math.Pow(dpfResult[k].x, 2) + Math.Pow(dpfResult[k].y, 2))) / n;
                        var frequencyValue = frequency * k;

                        maxAmplitude = amplitudeValue > maxAmplitude ? amplitudeValue : maxAmplitude;

                        result.Add(new SoundElement(amplitudeValue, frequencyValue));
                    }
                }

                dataContext.resultDpf.Add(file.Key, new ResultDpfModel(result, maxAmplitude));
            }
        }

        public void CalculateRequencyRatios(ref MainDataModel dataContext, NumericUpDown numUpMaxCount, NumericUpDown numUpIdent)
        {
            dataContext.requencyRatios = new Dictionary<int, List<double>>();
            foreach (var resultDpf in dataContext.resultDpf)
            {
                var delta = (int)numUpIdent.Value;

                var resultLocalMaximum = FindLocalMaximum(resultDpf.Value.resultDpfData, delta, numUpMaxCount);

                dataContext.requencyRatios.Add(resultDpf.Key, new List<double>());

                for (int k = 0; k < resultLocalMaximum.Count; k++)
                    for (int l = k + 1; l < resultLocalMaximum.Count; l++)
                    {
                        dataContext.requencyRatios[resultDpf.Key].Add(resultLocalMaximum[k].Frecuency / resultLocalMaximum[l].Frecuency >= 1
                            ? Math.Round(resultLocalMaximum[l].Frecuency / resultLocalMaximum[k].Frecuency, 2) : Math.Round(resultLocalMaximum[k].Frecuency / resultLocalMaximum[l].Frecuency,2));
                    }
            }
        }

        private List<SoundElement> FindLocalMaximum(List<SoundElement> resultData, int separatorCount, NumericUpDown numUpMaxCount)
        {
            var resultTemp = new List<SoundElement>();
            var res = new List<SoundElement>();
            SoundElement temp;
            for (int i = 2; i < resultData.Count() - 1; i++)
                if (resultData[i].Amplitude > resultData[i + 1].Amplitude && resultData[i].Amplitude > resultData[i - 1].Amplitude)
                    resultTemp.Add(resultData[i]);

            for (int i = 0; i < resultTemp.Count() - 1; i++)
                for (int j = i + 1; j < resultTemp.Count(); j++)
                    if (resultTemp[i].Amplitude < resultTemp[j].Amplitude)
                    {
                        temp = resultTemp[j];
                        resultTemp[j] = resultTemp[i];
                        resultTemp[i] = temp;
                    }

            for (int i = 0; i < resultTemp.Count(); i++)
                if (i == 0)
                    res.Add(resultTemp[i]);
                else
                {
                    bool f = true;
                    for (int j = 0; j < res.Count(); j++)
                        if (Math.Abs(resultTemp[i].Frecuency - res[j].Frecuency) < separatorCount)
                            f = false;
                    if (f) res.Add(resultTemp[i]);
                }
            res.RemoveRange((int)numUpMaxCount.Value, res.Count() - (int)numUpMaxCount.Value);

            return res;
        }
        #endregion

        #region Методы для работы с нейросетью
        public void NSampleGeneration(ref MainDataModel dataContext)
        {
            var musIntervals = new Dictionary<double, Color>()
            {
                { 0.89, Color.FromArgb(102, 255, 153) }, // Большая секунда
                { 0.84, Color.FromArgb(153, 204, 255) }, // Малая терция
                { 0.79, Color.FromArgb(102, 255, 153) }, // Большая терция
                { 0.75, Color.FromArgb(255, 153, 255) }, // Кварта (чистая)
                { 0.67, Color.FromArgb(255, 153, 255) }, // Квинта (чистая)
                { 0.63, Color.FromArgb(191, 191, 191) }, // Малая секста
                { 0.6, Color.FromArgb(255, 153, 153) }, // Большая секста
                { 0.56, Color.FromArgb(255, 255, 153) }, // Маля септима
                { 0.53, Color.FromArgb(191, 191, 191) }, // Большая септима
                { 0.5, Color.FromArgb(191, 191, 191) } // Октава
            };

            double[][] input = new double[dataContext.requencyRatios.ToArray().Length][];
            double[][] output = new double[dataContext.requencyRatios.ToArray().Length][];

            foreach (var el in dataContext.wavFiles)
            {
                output[el.Key] = new double[3];
                output[el.Key][0] = 0;
                output[el.Key][1] = 0;
                output[el.Key][2] = 0;
                output[el.Key][dataContext.wavFiles.Where(e => e.Key == el.Key).FirstOrDefault().Value.emotionNum - 1] = 1;
            }

            foreach(var reqVector in dataContext.requencyRatios)
            {
                input[reqVector.Key] = new double[10];

                for (var i = 0; i < musIntervals.Count(); i++)
                {
                    if (reqVector.Value.Contains(musIntervals.ToArray()[i].Key))
                        input[reqVector.Key][i] = 1;
                    else
                        input[reqVector.Key][i] = 0;
                }
            }
            dataContext.neuronNetworkModel = new NeuronNetworkModel(input, output);
        }

        public void NLearning(ref MainDataModel dataContext, ComboBox LearningAlg, ComboBox Activation, NumericUpDown iterationsCount, ProgressBar progressLearning)
        {
            int[] Layers = new int[dataContext.layersList.Count()];
            for (int i = 0; i < dataContext.layersList.Count(); i++)
            {
                Layers[i] = (int)dataContext.layersList[i].Value;
            }

            //if (dataContext.neuronNetworkModel.network == null)
            //{
            //Установить сеть
            if (Activation.Text == "SigmoidFunction")
                dataContext.neuronNetworkModel.network = new ActivationNetwork(new SigmoidFunction(), Layers[0], Layers.Skip(1).Take(Layers.Length-1).ToArray());
            else if (Activation.Text == "ThresholdFunction")
                dataContext.neuronNetworkModel.network = new ActivationNetwork(new ThresholdFunction(), Layers[0], Layers.Skip(1).Take(Layers.Length-1).ToArray());
            else if (Activation.Text == "BipolarSigmoidFunction")
                dataContext.neuronNetworkModel.network = new ActivationNetwork(new BipolarSigmoidFunction(), Layers[0], Layers.Skip(1).Take(Layers.Length-1).ToArray());
            else if (Activation.Text == "TanhActivationFunction")
                dataContext.neuronNetworkModel.network = new ActivationNetwork(new TanhActivationFunction(), Layers[0], Layers.Skip(1).Take(Layers.Length - 1).ToArray());
            //Метод обучения - это алгоритм обучения восприятию 
            if (LearningAlg.Text == "BackPropagationLearning")
                dataContext.neuronNetworkModel.teacher0 = new BackPropagationLearning(dataContext.neuronNetworkModel.network);
            else if (LearningAlg.Text == "DeltaRuleLearning")
                dataContext.neuronNetworkModel.teacher1 = new DeltaRuleLearning(dataContext.neuronNetworkModel.network);
            else if (LearningAlg.Text == "PerceptronLearning")
                dataContext.neuronNetworkModel.teacher2 = new PerceptronLearning(dataContext.neuronNetworkModel.network);
            else if (LearningAlg.Text == "ResilientBackpropagationLearning")
                dataContext.neuronNetworkModel.teacher3 = new ResilientBackpropagationLearning(dataContext.neuronNetworkModel.network);
            else if (LearningAlg.Text == "LevenbergMarquardtLearning")
                dataContext.neuronNetworkModel.teacher4 = new LevenbergMarquardtLearning(dataContext.neuronNetworkModel.network);
            //dataContext.neuronNetworkModel.teacher0.LearningRate = 1;
            //Определение абсолютная ошибка 
            double error = 1.0;
            Console.WriteLine();
            Console.WriteLine("learning error  ===>  {0}", error);

            //Количество итераций 
            int iterations = 0;
            Console.WriteLine();
            while (error > 0.01 && iterations < iterationsCount.Value)
            {
                progressLearning.Value = (int)(((double)iterations / (double)iterationsCount.Value) * 100.0);
                if (LearningAlg.Text == "BackPropagationLearning")
                    error = dataContext.neuronNetworkModel.teacher0.RunEpoch(dataContext.neuronNetworkModel.input, dataContext.neuronNetworkModel.output);
                //else if (LearningAlg.Text == "DeltaRuleLearning")
                //    error = dataContext.neuronNetworkModel.teacher1.RunEpoch(dataContext.neuronNetworkModel.input, dataContext.neuronNetworkModel.output);
                //else if (LearningAlg.Text == "PerceptronLearning")
                //    error = dataContext.neuronNetworkModel.teacher2.RunEpoch(dataContext.neuronNetworkModel.input, dataContext.neuronNetworkModel.output);
                else if (LearningAlg.Text == "ResilientBackpropagationLearning")
                    error = dataContext.neuronNetworkModel.teacher3.RunEpoch(dataContext.neuronNetworkModel.input, dataContext.neuronNetworkModel.output);
                else if (LearningAlg.Text == "LevenbergMarquardtLearning")
                    error = dataContext.neuronNetworkModel.teacher4.RunEpoch(dataContext.neuronNetworkModel.input, dataContext.neuronNetworkModel.output);
                Console.WriteLine("learning error  ===>  {0}", error);
                iterations++;
            }
            progressLearning.Value = 100;
            Console.WriteLine("iterations  ===>  {0}", iterations);
            Console.WriteLine();
            Console.WriteLine("sim:");
            //dataContext.neuronNetworkModel.network.Save("learnedNetwork");
            //}
        }

        public void NGetPredict(MainDataModel dataContext, RichTextBox resText, System.Windows.Forms.TextBox text)
        {
            var temp = new List<double>();
            foreach (var element in text.Text.ToString().Split('-'))
                temp.Add(Convert.ToDouble(element));
            while (temp.Count < 10)
                temp.Add(0);

            double[][] PredictData = new double[1][];
            PredictData[0] = new double[] {
                temp[0],
                temp[1],
                temp[2],
                temp[3],
                temp[4],
                temp[5],
                temp[6],
                temp[7],
                temp[8],
                temp[9]
            };
            string res = "";
            for (int i = 0; i < PredictData.Length; i++)
            {
                var result = new List<double>
                {
                    dataContext.neuronNetworkModel.network.Compute(PredictData[i])[0],
                    dataContext.neuronNetworkModel.network.Compute(PredictData[i])[1],
                    dataContext.neuronNetworkModel.network.Compute(PredictData[i])[2]
                };

                res += String.Format("sim{0}:  ===>  {1}\n{2}\n{3}\n", i, result[0],
                    result[1], result[2]);

                var emotion = result[0] == result.Max() ? "Радость" : (result[1] == result.Max() ? "Страх" : "Отвращение");
                res += "\n" + emotion;
            }
            resText.Text = res;
        }
        #endregion
    }
}
